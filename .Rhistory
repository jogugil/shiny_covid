shiny::runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
View(data_evolution)
View(data_evolution)
data_evolution <- data_confirmed_sub %>%
full_join(data_recovered_sub) %>%
rbind(data_deceased_sub) %>%
ungroup() %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
arrange(date) %>%
group_by(`Province/State`, `Country/Region`, Lat, Long) %>%
fill(confirmed, recovered, deceased) %>%
replace_na(list(deceased = 0, confirmed = 0)) %>%
mutate(
recovered_est = lag(confirmed, 14, default = 0) - deceased,
recovered_est = ifelse(recovered_est > 0, recovered_est, 0),
recovered     = coalesce(recovered, recovered_est),
active        = confirmed - recovered - deceased
) %>%
dplyr::select(-recovered_est) %>%
pivot_longer(names_to = "var", cols = c(confirmed, recovered, deceased, active)) %>%
filter(!(is.na(`Province/State`) && `Country/Region` == "US")) %>%
filter(!(Lat == 0 & Long == 0)) %>%
ungroup()
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
}
last_date <- max(data_evolution$date)
data_latest <- data_atDate(last_date)
top5_countries <- data_evolution %>%
filter(var == "active") %>%
group_by(`Country/Region`) %>%
summarise(value = sum(value, na.rm = T)) %>%
arrange(desc(value)) %>%
top_n(5) %>%
dplyr::select(`Country/Region`) %>%
pull()
sdplyr
))
View(data_evolution)
View(data_evolution)
# Calculamos la evoluci√≥n del virus y eliminamos los datos que no necesitamos
data_evolution <- data_evolution %>%
group_by(`Province/State`, `Country/Region`) %>%
mutate(value_new = value - lag(value, 4, default = 0)) %>%
ungroup()
#Eliminamos los datos que ya no nos sirven
rm(data_confirmed, data_confirmed_sub, data_recovered, data_recovered_sub, data_deceased, data_deceased_sub)
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
}
last_date <- max(data_evolution$date)
data_latest <- data_atDate(last_date)
data_latest <- data_atDate(last_date)
last_date <- max(data_evolution$date)
last_date <- max(data_evolution$date)
inputDate <- last_date
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct()
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value)
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct()
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value)
runApp('AppCOVID')
dd <- data_evolution[which(data_evolution$date == inputDate),] %>%
distinct()
view (dd)
dd <- data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>% filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
dd <- data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>% filter(vr > 0 )
dd <- data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>% filter(var > 0 )
view (dd)
dd %>%  pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value)
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
global_COvidDataWDMeterWorld
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataOMS)
population <- global_COvidDataWDMeterWorld$Population
global_COvidDataWDMeterWorld$TotalCases
global_COvidDataWDMeterWorld$TotalCases
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterCountry)
runApp('AppCOVID')
population <- global_COvidDataWDMeterWorld$Population
View(global_COvidDataWDMeterWorld)
population <- global_COvidDataWDMeterWorld$Population
t <- global_COvidDataWDMeterWorld$TotalCases
t
t/population
(t/population)*100
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
View(global_COvidDataOMS)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterCountry)
View(data_evolution)
runApp('AppCOVID')
View(global_COvidDataOMS)
View(global_COvidDataWDMeterCountry)
runApp()
runApp()
runApp()
runApp()
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
shiny::runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
shiny::runApp('AppCOVID')
runApp('AppCOVID')
shiny::runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
runApp()
runApp()
runApp()
runApp('AppCOVID')
runApp('AppCOVID')
View(data_evolution)
View(data_evolution)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterCountry)
shiny::runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
c
runApp('AppCOVID')
?wb_data
runApp('AppCOVID')
pp <- wb_data(country = "countries_only", indicator = "SP.POP.TOTL", start_date = 2019, end_date = 2021)
head(pp)
runApp('AppCOVID')
global_COvidDataOMS               <- read.csv(omsGlobal)
global_COvidDataWDMeterWorld      <- read.csv(wldometer_World)
global_COvidDataWDMeterCountry    <- read.csv(wldometer_Country)
global_COvidDataWDMeterContinent  <- read.csv(wldometer_Continent)
population                                                            <- wb_data(country = "countries_only", indicator = "SP.POP.TOTL", start_date = 2019, end_date = 2021) %>%
select(country, SP.POP.TOTL) %>%
rename(population = SP.POP.TOTL)
head(population)
countryNamesPop                                                       <- c("Brunei Darussalam", "Congo, Dem. Rep.", "Congo, Rep.", "Czech Republic",
"Egypt, Arab Rep.", "Iran, Islamic Rep.", "Korea, Rep.", "St. Lucia", "West Bank and Gaza", "Russian Federation",
"Slovak Republic", "United States", "St. Vincent and the Grenadines", "Venezuela, RB")
View(population)
countryNamesPop                                                       <- c("Brunei Darussalam", "Congo, Dem. Rep.", "Congo, Rep.", "Czech Republic",
"Egypt, Arab Rep.", "Iran, Islamic Rep.", "Korea, Rep.", "St. Lucia", "West Bank and Gaza", "Russian Federation",
"Slovak Republic", "United States", "St. Vincent and the Grenadines", "Venezuela, RB")
countryNamesDat                                                       <- c("Brunei", "Congo (Kinshasa)", "Congo (Brazzaville)", "Czechia", "Egypt", "Iran", "Korea, South",
"Saint Lucia", "occupied Palestinian territory", "Russia", "Slovakia", "US", "Saint Vincent and the Grenadines", "Venezuela")
population[which(population$country %in% countryNamesPop), "country"]
population[which(population$country %in% countryNamesPop), "country"] <- countryNamesDat
legth(countryNamesDat)
length(countryNamesDat)
length (population[which(population$country %in% countryNamesPop), "country"])
population[which(population$country %in% countryNamesPop), "country"]
str(population[which(population$country %in% countryNamesPop), "country"])
str(countryNamesDat)
population[which(population$country %in% countryNamesPop), "country"] <- t(countryNamesDat)
population[which(population$country %in% countryNamesPop), "country"] <- countryNamesDat
population                                                            <- wb_data(country = "countries_only", indicator = "SP.POP.TOTL", start_date = 2019, end_date = 2021) %>%
select(country, SP.POP.TOTL) %>%
rename(population = SP.POP.TOTL)
countryNamesPop                                                       <- c("Brunei Darussalam", "Congo, Dem. Rep.", "Congo, Rep.", "Czech Republic",
"Egypt, Arab Rep.", "Iran, Islamic Rep.", "Korea, Rep.", "St. Lucia", "West Bank and Gaza", "Russian Federation",
"Slovak Republic", "United States", "St. Vincent and the Grenadines", "Venezuela, RB")
countryNamesDat                                                       <- c("Brunei", "Congo (Kinshasa)", "Congo (Brazzaville)", "Czechia", "Egypt", "Iran", "Korea, South",
"Saint Lucia", "occupied Palestinian territory", "Russia", "Slovakia", "US", "Saint Vincent and the Grenadines", "Venezuela")
population[which(population$country %in% countryNamesPop), "country"] <- countryNamesDat
population                                                            <- wb_data(country = "countries_only", indicator = "SP.POP.TOTL", start_date = 2019, end_date = 2021) %>%
select(country, SP.POP.TOTL) %>%
rename(population = SP.POP.TOTL)
countryNamesPop                                                       <- c("Brunei Darussalam", "Congo, Dem. Rep.", "Congo, Rep.", "Czech Republic",
"Egypt, Arab Rep.", "Iran, Islamic Rep.", "Korea, Rep.", "St. Lucia", "West Bank and Gaza", "Russian Federation",
"Slovak Republic", "United States", "St. Vincent and the Grenadines", "Venezuela, RB")
countryNamesDat                                                       <- c("Brunei", "Congo (Kinshasa)", "Congo (Brazzaville)", "Czechia", "Egypt", "Iran", "Korea, South",
"Saint Lucia", "occupied Palestinian territory", "Russia", "Slovakia", "US", "Saint Vincent and the Grenadines", "Venezuela")
View(population)
population <- na.omit(population)
population[which(population$country %in% countryNamesPop), "country"] <- countryNamesDat
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
runApp('AppCOVID')
View(data_evolution)
View(data_evolution)
View(data_evolution)
View(data_evolution)
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('D:/proyectoVDCOVID/old')
runApp('D:/proyectoVDCOVID/old')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
addLabel <- function(data) {
label <-""
if (i18n$get_key_translation()=='es') {
label <- paste0(
'<b>', ifelse(is.na(data$`Province/State`), data$`Country/Region`, data$`Province/State`), '</b><br>
<table style="width:120px;">
<tr><td>Confirmados:</td><td align="right">', data$confirmed, '</td></tr>
<tr><td>Fallecidos:</td><td align="right">', data$deceased, '</td></tr>
<tr><td>Recuperados:</td><td align="right">', data$recovered, '</td></tr>
<tr><td>Activos:</td><td align="right">', data$active, '</td></tr>
</table>'
)
} else  {
label <- paste0(
'<b>', ifelse(is.na(data$`Province/State`), data$`Country/Region`, data$`Province/State`), '</b><br>
<table style="width:120px;">
<tr><td>Confirmed:</td><td align="right">', data$confirmed, '</td></tr>
<tr><td>Deceased:</td><td align="right">', data$deceased, '</td></tr>
<tr><td>Estimated Recoveries:</td><td align="right">', data$recovered, '</td></tr>
<tr><td>Active:</td><td align="right">', data$active, '</td></tr>
</table>'
)
}
data$label <- label
data$label <- lapply(data$label, HTML)
return(data)
}
leaflet(addLabel(data_latest))
leaflet(addLabel(data_latest))
runApp('AppCOVID')
addLabel <- function(data) {
label <-""
print(i18n$get_key_translation())
if (i18n$get_key_translation()=='es') {
label <- paste0(
'<b>', ifelse(is.na(data$`Province/State`), data$`Country/Region`, data$`Province/State`), '</b><br>
<table style="width:120px;">
<tr><td>Confirmados:</td><td align="right">', data$confirmed, '</td></tr>
<tr><td>Fallecidos:</td><td align="right">', data$deceased, '</td></tr>
<tr><td>Recuperados:</td><td align="right">', data$recovered, '</td></tr>
<tr><td>Activos:</td><td align="right">', data$active, '</td></tr>
</table>'
)
} else  {
label <- paste0(
'<b>', ifelse(is.na(data$`Province/State`), data$`Country/Region`, data$`Province/State`), '</b><br>
<table style="width:120px;">
<tr><td>Confirmed:</td><td align="right">', data$confirmed, '</td></tr>
<tr><td>Deceased:</td><td align="right">', data$deceased, '</td></tr>
<tr><td>Estimated Recoveries:</td><td align="right">', data$recovered, '</td></tr>
<tr><td>Active:</td><td align="right">', data$active, '</td></tr>
</table>'
)
}
data$label <- label
data$label <- lapply(data$label, HTML)
return(data)
}
leaflet(addLabel(data_latest)) %>%
setMaxBounds(-180, -90, 180, 90) %>%
setView(0, 20, zoom = 2) %>%
addTiles()
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
source('D:/proyectoVDCOVID/appcodi/shiny_covid/AppCOVID/helpers/global.R', encoding = 'UTF-8')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
runApp('AppCOVID')
runApp()
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
?valueBox
runApp('AppCOVID')
date
min(data_evolution$date)
data <- data_atDate(date) %>% summarise(
confirmed = sum(confirmed, na.rm = T),
recovered = sum(recovered, na.rm = T),
deceased  = sum(deceased, na.rm = T),
countries = n_distinct(`Country/Region`)
)
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
?pivot_wider
runApp('AppCOVID')
runApp('AppCOVID')
?distinct
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
?pivot_wider
?spread
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
View(data_evolution)
View(data_evolution)
View(data_latest)
View(data_latest)
runApp('AppCOVID')
View(data_evolution)
View(data_evolution)
View(data_latest)
View(data_latest)
View(map)
View(map)
View(ValenciaDataUpdate_page)
runApp('AppCOVID')
View(data_evolution)
View(data_evolution)
d <- Sys.Date()
data_evolution[which(data_evolution$date == d),]%>%
distinct()
d
top5_countries <- data_evolution %>%
filter(var == "active") %>%
group_by(`Country/Region`) %>%
summarise(value = sum(value, na.rm = T)) %>%
arrange(desc(value)) %>%
top_n(5) %>%
dplyr::select(`Country/Region`) %>%
pull()
data_latest <- data_atDate(last_date)
data_evolution[which(data_evolution$date == last_date),] %>% distinct()
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long", "population"), names_from = var, values_from = value)
data_evolution[which(data_evolution$date == last_date),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long", "population"), names_from = var, values_from = value)
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
runApp()
runApp('AppCOVID')
runApp()
body_global <- mainPanel(
#A√±ado los colores y el tama√±o de los objetos a mostrar
tags$head(
tags$style(type = "text/css", "#global_map {height: 50vh }"),
tags$style(type = 'text/css', ".slider-animate-button { font-size: 10pt  }"),
tags$style(type = 'text/css', ".slider-animate-container { text-align: left  }"),
tags$style(type = "text/css", "@media (max-width: 991px) { .details { display: flex; flex-direction: column; } }"),
tags$style(type = "text/css", "@media (max-width: 991px) { .details .map { order: 1; width: 100%; } }"),
tags$style(type = "text/css", "@media (max-width: 991px) { .details .summary { order: 3; width: 100%; } }"),
tags$style(type = "text/css", "@media (max-width: 991px) { .details .slider { order: 2; width: 100%; } }")
),
fluidRow(
fluidRow(
uiOutput("box_keyFigures")
),
fluidRow(
class = "details",
column(
box(
width = 12,
leafletOutput("overview_map")
),
class = "map",
width = 8,
style = 'padding:0px;'
),
column(
uiOutput("summaryTables"),
class = "summary",
width = 4,
style = 'padding:0px;'
),
column(
sliderInput(
"timeSlider",
label      = "Select date",
min        = min(data_evolution$date),
max        = max(data_evolution$date),
value      = max(data_evolution$date),
width      = "100%",
timeFormat = "%d.%m.%Y",
animate    = animationOptions(loop = TRUE)
),
class = "slider",
width = 12,
style = 'padding-left:15px; padding-right:15px;'
)
)
)
)
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
