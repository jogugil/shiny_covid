runApp('AppCOVID')
runApp('AppCOVID')
r <-"COVID-19_:_Cómo_prepararse_se_alguien_se_enferma_en_su_hogar"
paste(PATH_DATA,str_trim(r),'/')
paste0(PATH_DATA,str_trim(r),'/')
paste0(PATH_DATA,str_trim(r),"/")
paste(PATH_DATA,str_trim(r),"/")
paste1(PATH_DATA,str_trim(r),"/")
paste(PATH_DATA,str_trim(r),"/")
runApp('AppCOVID')
runApp('AppCOVID')
patron <- "^COViD-19_:"
patron <- "^COViD-19 :"
alt <- "COVID-19_:_no_cancele_las_citas_médicas.png"
strsplit(alt, patron)
patron <- "^COViD-19_:"
strsplit(alt, patron)
patron <- "^COVID-19 :"
strsplit(alt, patron)
patron <- "^COVID-19_:"
strsplit(alt, patron)
url_recomendationsOMS ='https://www.who.int/es/emergencies/diseases/novel-coronavirus-2019/advice-for-public'
html <-  url_recomendationsOMS  %>% read_html()
i<-1
is_corona <- node %>% html_attr ('data-src')%>%grepl('coronavirus',.)
df <- NULL
is_corona <- node %>% html_attr ('data-src')%>%grepl('coronavirus',.)
runApp('AppCOVID')
alt <- "COVID-19 : no cancele las citas médicas"
strsplit(string, patron)
strsplit(alt, patron)
patron
patron <- "^COVID-19 :"
strsplit(alt, patron)
pp <- strsplit(alt, patron)
pp
pp[[2]]
pp[[1,2]]
pp[[1]]
str(pp)
pp
pp[2]
pp[1]
str_trim(pp)
str_trimp(pp)
str_trim(pp)
str_trim(pp)
str_s`plit(alt,patron)`
str_split(alt,patron)`
str_split(alt,patron)
)
-ngfx>BN _
s
wF
.qefmkgwÑ, v
PT2
32
str_split(alt,patron)
str_split(alt,patron) [1]
str_split(alt,patron) [2]
regexpr(patron, alt)
str_split(alt,":")
str_split(alt,":") [2]
str_split(alt,":") [1][2]
str_split(alt,":") [1]
pp <- str_split(alt,":") [1]
pp
str(pp)
str(pp)[1,1]
str(pp)[2:1]
str(pp)[2:]
str(pp)[:2]
str(pp)[1:2]
str(pp)[2:1]
str(pp)[1]
str_trim (pp)
str_trim (pp[2])
str_trim (pp[1])
str_trim (pp[[1]])
str_trim (pp[[1]][2])
alt
alt %>% strsplit(.,patron)
alt %>% strsplit(.,patron)[[1]][2] %>% str_trim(.)
alt %>% strsplit(.,patron)[[1]][2]
alt %>% strsplit(.,patron)[[1]][1]
alt %>% strsplit(.,patron)[[1]]
alt %>% strsplit(.,patron)[1]
alt %>% strsplit(.,patron)
alt %>% strsplit(.,patron) %>% str_trim (.[[1]][2])
alt %>% strsplit(.,patron) %>% str_trim ()
alt %>% strsplit(.,patron) %>% str_trim (.[[1]])
alt %>% strsplit(.,patron)
alt %>% str_split(.,patron)
alt %>% str_split(.,patron)%>%str_trim(.[[1]][2])
alt %>% str_split(.,patron)%>%str_trim(.[[1]][2])
alt %>% str_split(.,patron) [[1]]
alt %>% str_split(.,patron)
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
#############
printApp <- function (sText,file=stdout()) {
if(DEBUG)
print(file=file,sText)
}
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
alt %>% stringr::str_locate(. , patron)
"TIOPEPEP" %>% stringr::str_locate(. , patron)
pp <- "TIOPEPEP" %>% stringr::str_locate(. , patron)
str (pp)
pp  ['end']
pp <- alt  %>% stringr::str_locate(. , patron)
pp['end']
pp
pp ["end"]
pp[[1]]$end
pp[[1]]
pp[[2]]
pp <- "TIOPEPEP" %>% stringr::str_locate(. , patron)
pp[[2]]
substring()
?substring
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
runApp('AppCOVID')
list.files(pattern='./data/RECOM/OMS/*png')
list.files(pattern='./APPCOVID/data/RECOM/OMS/*png')
list.files(pattern='./APPCOVID/data/RECOM/OMS/*.*')
list.files(pattern='./data/RECOM/OMS/*.*')
list.files(pattern='*.*')
list.files(pattern='*.png')
list.files(pattern='./App/COVID/*.png')
list.files(pattern='./App/COVID/*.*')
list.files(pattern='./AppCOVID/*.*')
list.files(pattern='./AppCOVID/')
?list.files
list.files(path='./AppCOVID/',pattern='*.*')
list.files(path='./AppCOVID/data/',pattern='*.*')
list.files(path='./AppCOVID/data/RECOM/OMS',pattern='*.*')
list.files(path='./AppCOVID/data/RECOM/OMS',pattern='*.*')
pp <- list.files(path='./AppCOVID/data/RECOM/OMS',pattern='*.*')
str(pp)
str(pp)
pp <- list.files(path='./AppCOVID/data/',pattern='*.*')
str(pp)
pp[[1]]
length(pp)
ll <- "casos_diagnostico_ccaa.csv"
str_view (ll,".[:alpha:]")
str_view (ll,".[:alpha:]$")
str_view (ll,".[:alpha:]*$")
str_view (ll,".[:alpha:]*$")
str_view (ll,".[:alpha:]*$")
gsub(".[:alpha:]*$",ll)
gsub(patron=".[:alpha:]*$",ll)
?gsub
gsub(pattern=".[:alpha:]*$",x=ll)
gsub(pattern=".[:alpha:]*$",ignore.case=FALSE,perl=TRUE,x=ll)
gsub(pattern=".[:alpha:]*$","",ignore.case=FALSE,perl=TRUE,x=ll)
atron = ".[:alpha:]*$"
gsub(pattern=atron,"",ignore.case=FALSE,perl=TRUE,x=ll)
gsub(pattern=atron,"",ignore.case=FALSE,x=ll)
patron = ".[:alpha:]*$"
str_view(patron,ll)
str_view(ll,patron)
?sub
sub(patron, " ",ll)
patron = ".\w*$"
patron = ".\\w*$"
str_view(ll,patron)
sub(patron, " ",ll)
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
shiny::runApp('AppCOVID')
files  <-  list.files(path=PATH__RECOMEN_IMG_OMS,pattern='*.png')
files  <-  list.files(path=PATH__RECOMEN_IMG_OMS,pattern='*.png')
l      <- length(files)
l
lapply(1:l, function(i) {
label <- file[i] %>% sub (patron,"",.)%>% str_trim(.)
tabPanel(title = label,h1(label()), fluidRow(tags$img(src = files [i])) )
})
files  <-  list.files(path=PATH__RECOMEN_IMG_OMS,pattern='*.png')
l      <- length(files)
if (l > 0) {
mytabs <- lapply(1:l, function(i) {
label <- file[i] %>% sub (patron,"",.)%>% str_trim(.)
tabPanel(title = label,h1(label()), fluidRow(tags$img(src = files [i])))
})
return (mytabs)
} else {
mytabs <- tabPanel(title = 'R 0', fluidRow(box(h3("No existen recomendaciones de la OMS."))))
return (mytabas)
}
patron <- ".\\w*$" #Eliminamos la extensión del fichero (en teoria tendría que ser png, aqui no se comprueba)
files  <-  list.files(path=PATH__RECOMEN_IMG_OMS,pattern='*.png')
l      <- length(files)
if (l > 0) {
mytabs <- lapply(1:l, function(i) {
label <- file[i] %>% sub (patron,"",.)%>% str_trim(.)
tabPanel(title = label,h1(label()), fluidRow(tags$img(src = files [i])))
})
return (mytabs)
} else {
mytabs <- tabPanel(title = 'R 0', fluidRow(box(h3("No existen recomendaciones de la OMS."))))
return (mytabs)
}
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
shiny::runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
files_imgOMS <- load_filesRecomOMS ()
files_imgOMS
patron <- ".\\w*$" #Eliminamos la extensión del fichero (tendría que ser png, aquí no se comprueba)
files  <-  list.files(path=PATH__RECOMEN_IMG_OMS,pattern='*.png')
l   <- length(files)
mytabs <- NULL
if (l>0) {
printApp("CREADO LOS TABAS")
mytabs <- lapply(1:l, function(i) {
label <- file[i] %>% sub (patron,"",.)%>% str_trim(.)
tabPanel(title = label,h1(label()), fluidRow(tags$img(src = files [i])))
})
if(is.null(mytabs)) {
mytabs <- tabPanel(title = 'R 0', fluidRow(h3("No existen recomendaciones de la OMS.")))
}
}
mytabs
files  <-  list.files(path=PATH__RECOMEN_IMG_OMS,pattern='*.png')
PATH__RECOMEN_IMG_OMS
files
runApp('AppCOVID')
path <- "D:\proyectoVDCOVID\appcodi\shiny_covid\AppCOVID\data\recom\oms"
path <- "D:\\proyectoVDCOVID\\appcodi\\shiny_covid\\AppCOVID\\data\\recom\\oms"
list.files(path=path,pattern='*.png')
files <- list.files(path=path,pattern='*.png')
l   <- length(files)
mytabs <- lapply(1:l, function(i) {
label <- file[i] %>% sub (patron,"",.)%>% str_trim(.)
tabPanel(title = label,h1(label()), fluidRow(tags$img(src = files [i])))
})
i <- 1
label <- file[i] %>% sub (patron,"",.)%>% str_trim(.)
file[i] %>% sub (patron,"",.)%>% str_trim(.)
file[i] %>% sub (patron,"",.)
file[i]
label <- files[i] %>% sub (patron,"",.)%>% str_trim(.)
mytabs <- lapply(1:l, function(i) {
label <- files[i] %>% sub (patron,"",.)%>% str_trim(.)
tabPanel(title = label,h1(label()), fluidRow(tags$img(src = files [i])))
})
label <- files[i] %>% sub (patron,"",.)%>% str_trim(.)
label
tabPanel(title = label,h1(label()), fluidRow(tags$img(src = files [i])))
tabPanel(title = label,h1(gsub("_","",label)), fluidRow(tags$img(src = files [i])))
tabPanel(title = label,h1(gsub("_"," ",label)), fluidRow(tags$img(src = files [i])))
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
?file.copy
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
library(shiny.i18n)
i18n <- Translator$new(translation_json_path = "translations/translation.json")
i18n <- Translator$new(translation_json_path = "./translations/translation.json")
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
i18n <- Translator$new(translation_json_path = "translations/translation.json")
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
install.packages("shinyWidgets")
i18n <- Translator$new(translation_json_path = "./translations/translations.json")
shiny::runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
df <- data.frame(
val = i18n$get_languages()
)
df
df$img <- lapply (1:length(df$val),function (i) {
img_lang <- paste (df$val[i],"png",".")
sprintf("<img src=\'%s\',width=30px><div class='jhr'>%s</div></img>",img_lang, df$val[1])
})
df$img
df$img <- lapply (1:length(df$val),function (i) {
img_lang <- paste (tstr_trim(df$val[i]),"png",sep=".")
sprintf("<img src=\'%s\',width=30px><div class='jhr'>%s</div></img>",img_lang, df$val[1])
})
df$img <- lapply (1:length(df$val),function (i) {
img_lang <- paste (tstr_trim(df$val[i]),"png",sep=".")
sprintf("<img src=\'%s\',width=30px><div class='jhr'>%s</div></img>",img_lang, df$val[1])
})
df$img <- lapply (1:length(df$val),function (i) {
img_lang <- paste (str_trim(df$val[i]),"png",sep=".")
sprintf("<img src=\'%s\',width=30px><div class='jhr'>%s</div></img>",img_lang, df$val[1])
})
df$img
df$img <- lapply (1:length(df$val),function (i) {
img_lang <- paste (str_trim(df$val[i]),"png",sep=".")
sprintf("<img src=\'%s\',width=30px><div class='jhr'>%s</img>",img_lang, df$val[1])
})
df$img
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('D:/proyectoVDCOVID/codigo/corona_app_RShiny-master')
runApp('D:/proyectoVDCOVID/codigo/corona_app_RShiny-master')
runApp('D:/proyectoVDCOVID/codigo/corona_app_RShiny-master')
runApp('D:/proyectoVDCOVID/codigo/corona_app_RShiny-master')
runApp('D:/proyectoVDCOVID/codigo/corona_app_RShiny-master')
runApp('D:/proyectoVDCOVID/codigo/corona_app_RShiny-master')
runApp('D:/proyectoVDCOVID/codigo/corona_app_RShiny-master')
runApp('D:/proyectoVDCOVID/codigo/corona_app_RShiny-master')
runApp('D:/proyectoVDCOVID/codigo/corona_app_RShiny-master')
runApp('D:/proyectoVDCOVID/codigo/corona_app_RShiny-master')
runApp('AppCOVID')
date <- Sys.date ()
##PRimero comprobamos si existe el fichero del día actual
## Si no existe el fichero los actualizamos
wldometer_World     <- sprintf("%s/worldometersContinent_%s",PATH_DATA,date)
sprintf("%s/worldometersContinent_%s",PATH_DATA,date)
date
nowdate <- Sys.date ()
nowdate
nowdate <- Sys.date ()
nowdate <- Sys.Date ()
nowdate
##PRimero comprobamos si existe el fichero del día actual
## Si no existe el fichero los actualizamos
wldometer_World     <- sprintf("%s/worldometersContinent_%s",PATH_DATA,nowdate)
wldometer_World
nowdate <- Sys.Date ()
##PRimero comprobamos si existe el fichero del día actual
## Si no existe el fichero los actualizamos
wldometer_World     <- sprintf("%s/worldometersContinent_%s.csv",PATH_DATA,nowdate)
wldometer_Country   <- sprintf("%s/worldometersCountry_%s.csv",PATH_DATA,nowdate)
wldometer_Continent <- sprintf("%s/worldometersWorld_%s.csv",PATH_DATA,nowdate)
omsGlobal           <- sprintf("%s/globalDataOMS_%s.csv",PATH_DATA,nowdate)
if(!file.exists(omsGlobal)) {
download_GlobalFiles ()
}
download_GlobalFiles <- function () {
url_CSVOMS <- "https://covid19.who.int/WHO-COVID-19-global-table-data.csv"
url_world  <- "https://www.worldometers.info/coronavirus/"
#Descargamos el fichero de la OMS
filename <- createFilename (path=PATH_DATA,name="globalDataOMS")
names(data_file) <-  PKI_OMS
data_file <- read.csv(url_CSVOMS)
write.csv(data_file,filename)
#Descargamos el fichero de   worldometers con web scraping
my_table<- url_world %>% read_html() %>% html_table() %>%.[[1]]
my_table[]<-lapply(my_table, function(x) (gsub("\\,|\\+", "", (x))))
names(my_table) <- PKI_WD
fCont <- createFilename (path=PATH_DATA,name="worldometersContinent")
write.csv(continent,fCont)
fworld <- createFilename (path=PATH_DATA,name="worldometersWorld")
write.csv(world,fworld)
fcountry <- createFilename (path=PATH_DATA,name="worldometersCountry")
write.csv(contry,fcountry)
return (res)
}
download_GlobalFiles ()
download_GlobalFiles ()
download_GlobalFiles <- function () {
url_CSVOMS <- "https://covid19.who.int/WHO-COVID-19-global-table-data.csv"
url_world  <- "https://www.worldometers.info/coronavirus/"
#Descargamos el fichero de la OMS
filename <- createFilename (path=PATH_DATA,name="globalDataOMS")
data_file <- read.csv(url_CSVOMS)
names(data_file) <-  PKI_OMS
write.csv(data_file,filename)
#Descargamos el fichero de   worldometers con web scraping
my_table<- url_world %>% read_html() %>% html_table() %>%.[[1]]
my_table[]<-lapply(my_table, function(x) (gsub("\\,|\\+", "", (x))))
names(my_table) <- PKI_WD
fCont <- createFilename (path=PATH_DATA,name="worldometersContinent")
write.csv(continent,fCont)
fworld <- createFilename (path=PATH_DATA,name="worldometersWorld")
write.csv(world,fworld)
fcountry <- createFilename (path=PATH_DATA,name="worldometersCountry")
write.csv(contry,fcountry)
return (res)
}
download_GlobalFiles ()
url_CSVOMS <- "https://covid19.who.int/WHO-COVID-19-global-table-data.csv"
url_world  <- "https://www.worldometers.info/coronavirus/"
#Descargamos el fichero de la OMS
filename <- createFilename (path=PATH_DATA,name="globalDataOMS")
data_file <- read.csv(url_CSVOMS)
names(data_file) <-  PKI_OMS
write.csv(data_file,filename)
runApp('AppCOVID')
url_cvData  <- "https://dadesobertes.gva.es/dataset/385d7d96-693b-4361-a00f-4e72b30a3695/resource/4dc944c0-c70a-474a-9cb6-288d218a93b7/download/covid-19-total-acumulado-de-casos-confirmados-pcr-altas-epidemiologicas-personas-fallecidas-y-da.csv"
runApp('AppCOVID')
#Cargamos los ficheros de datos.
# Si no existen lso ficeros del dia actual los creamos o descargamos de la web
doCall (load_globalData )
#Cargamos los ficheros de datos.
# Si no existen lso ficeros del dia actual los creamos o descargamos de la web
do.Call (load_globalData )
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
runApp('AppCOVID')
runApp('AppCOVID')
