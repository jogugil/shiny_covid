fill(confirmed, recovered, deceased) %>%
replace_na(list(deceased = 0, confirmed = 0)) %>%
mutate(
recovered_est = lag(confirmed, 14, default = 0) - deceased,
recovered_est = ifelse(recovered_est > 0, recovered_est, 0),
recovered     = coalesce(recovered, recovered_est),
active        = confirmed - recovered - deceased
) %>%
select(-recovered_est) %>%
pivot_longer(names_to = "var", cols = c(confirmed, recovered, deceased, active)) %>%
filter(!(is.na(`Province.State`) && `Country.Region` == "US")) %>%
filter(!(Lat == 0 & Long == 0)) %>%
ungroup()
View(data_evolution)
View(data_evolution)
data_confirmed_sub %>%
full_join(data_recovered_sub) %>%
rbind(data_deceased_sub) %>%
ungroup() %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
arrange(date) %>%
group_by(`Province.State`, `Country.Region`, Lat, Long) %>%
fill(confirmed, recovered, deceased)
data_evolution <- data_confirmed_sub %>%
full_join(data_recovered_sub) %>%
rbind(data_deceased_sub) %>%
ungroup() %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
arrange(date) %>%
group_by(`Province.State`, `Country.Region`, Lat, Long) %>%
fill(confirmed, recovered, deceased) %>%
replace_na(list(deceased = 0, confirmed = 0)) %>%
mutate(
recovered_est = lag(confirmed, 14, default = 0) - deceased,
recovered_est = ifelse(recovered_est > 0, recovered_est, 0),
recovered     = coalesce(recovered, recovered_est),
active        = confirmed - recovered - deceased
) %>%
select(-recovered_est) %>%
pivot_longer(names_to = "var", cols = c(confirmed, recovered, deceased, active)) %>%
filter(!(is.na(`Province.State`) && `Country.Region` == "US")) %>%
filter(!(Lat == 0 & Long == 0)) %>%
ungroup()
# Calculamos la evolución del virus y eiminamos los datos que no necesitamos
data_evolution <- data_evolution %>%
group_by(`Province.State`, `Country.Region`) %>%
mutate(value_new = value - lag(value, 4, default = 0)) %>%
ungroup()
View(data_evolution)
View(data_evolution)
#Eliminamos los datos que ya no nos sirven
rm(data_confirmed, data_confirmed_sub, data_recovered, data_recovered_sub, data_deceased, data_deceased_sub)
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province.State", "Country.Region", "date", "Lat", "Long"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
}
data_latest <- data_atDate(max(data_evolution$date))
data_evolution%>%
distinct() %>%
pivot_wider(id_cols = c("Province.State", "Country.Region", "date", "Lat", "Long"), names_from = var, values_from = value)
data_evolution %>%
distinct() %>%
pivot_wider(id_cols = c("Province.State", "Country.Region", "date", "Lat", "Long"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province.State", "Country.Region", "date", "Lat", "Long", "population"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
}
data_latest <- data_atDate(max(data_evolution$date))
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province.State", "Country.Region", "date", "Lat", "Long"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
}
data_latest <- data_atDate(max(data_evolution$date))
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province.State", "Country.Region", "date", "Lat", "Long"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
}
data_latest <- data_atDate(max(data_evolution$date))
data_latest <- data_atDate(max(data_evolution$date))
data_latest <- data_atDate(max(data_evolution$date))
rlang::last_error()
data_confirmed    <- read.csv("./Appcovid/data/time_series_covid19_confirmed_global.csv")
data_deceased     <- read.csv("./Appcovid/data/time_series_covid19_deaths_global.csv")
data_recovered    <- read.csv("./Appcovid/data/time_series_covid19_recovered_global.csv")
data_confirmed_sub <- data_confirmed %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
group_by(`Province.State`, `Country.Region`, date, Lat, Long) %>%
summarise("confirmed" = sum(value, na.rm = T))
data_confirmed_sub <- data_confirmed %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
group_by(`Province.State`, `Country.Region`, date, Lat, Long) %>%
summarise("confirmed" = sum(value, na.rm = T))
data_recovered_sub <- data_recovered %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_recovered)) %>%
group_by(`Province.State`, `Country.Region`, date, Lat, Long) %>%
summarise("recovered" = sum(value, na.rm = T))
data_deceased_sub <- data_deceased %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_deceased)) %>%
group_by(`Province.State`, `Country.Region`, date, Lat, Long) %>%
summarise("deceased" = sum(value, na.rm = T))
data_evolution <- data_confirmed_sub %>%
full_join(data_recovered_sub) %>%
rbind(data_deceased_sub) %>%
ungroup() %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
arrange(date) %>%
group_by(`Province.State`, `Country.Region`, Lat, Long) %>%
fill(confirmed, recovered, deceased) %>%
replace_na(list(deceased = 0, confirmed = 0)) %>%
mutate(
recovered_est = lag(confirmed, 14, default = 0) - deceased,
recovered_est = ifelse(recovered_est > 0, recovered_est, 0),
recovered     = coalesce(recovered, recovered_est),
active        = confirmed - recovered - deceased
) %>%
select(-recovered_est) %>%
pivot_longer(names_to = "var", cols = c(confirmed, recovered, deceased, active)) %>%
filter(!(is.na(`Province.State`) && `Country.Region` == "US")) %>%
filter(!(Lat == 0 & Long == 0)) %>%
ungroup()
# Calculamos la evolución del virus y eiminamos los datos que no necesitamos
data_evolution <- data_evolution %>%
group_by(`Province.State`, `Country.Region`) %>%
mutate(value_new = value - lag(value, 4, default = 0)) %>%
ungroup()
#Eliminamos los datos que ya no nos sirven
rm(data_confirmed, data_confirmed_sub, data_recovered, data_recovered_sub, data_deceased, data_deceased_sub)
View(data_evolution)
View(data_evolution)
last_date <- max(data_evolution$date)
last_date
data_evolution$date
View(data_evolution)
View(data_evolution)
View(data_evolution)
data_confirmed_sub <- data_confirmed %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
group_by(`Province.State`, `Country.Region`, date, Lat, Long) %>%
summarise("confirmed" = sum(value, na.rm = T))
data_recovered_sub <- data_recovered %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_recovered)) %>%
group_by(`Province.State`, `Country.Region`, date, Lat, Long) %>%
summarise("recovered" = sum(value, na.rm = T))
data_deceased_sub <- data_deceased %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_deceased)) %>%
group_by(`Province.State`, `Country.Region`, date, Lat, Long) %>%
summarise("deceased" = sum(value, na.rm = T))
data_confirmed    <- read.csv("./Appcovid/data/time_series_covid19_confirmed_global.csv")
data_deceased     <- read.csv("./Appcovid/data/time_series_covid19_deaths_global.csv")
data_recovered    <- read.csv("./Appcovid/data/time_series_covid19_recovered_global.csv")
data_confirmed_sub <- data_confirmed %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
group_by(`Province.State`, `Country.Region`, date, Lat, Long) %>%
summarise("confirmed" = sum(value, na.rm = T))
data_recovered_sub <- data_recovered %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_recovered)) %>%
group_by(`Province.State`, `Country.Region`, date, Lat, Long) %>%
summarise("recovered" = sum(value, na.rm = T))
data_deceased_sub <- data_deceased %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_deceased)) %>%
group_by(`Province.State`, `Country.Region`, date, Lat, Long) %>%
summarise("deceased" = sum(value, na.rm = T))
View(data_confirmed)
View(data_confirmed)
View(data_confirmed_sub)
View(data_confirmed_sub)
data_confirmed    <- read_csv("./Appcovid/data/time_series_covid19_confirmed_global.csv")
View(data_confirmed)
View(data_confirmed)
data_confirmed    <- read_csv("./Appcovid/data/time_series_covid19_confirmed_global.csv")
data_deceased     <- read_csv("./Appcovid/data/time_series_covid19_deaths_global.csv")
data_recovered    <- read_csv("./Appcovid/data/time_series_covid19_recovered_global.csv")
#Cargamos los datos de serie temporal por país (Obtenemos la evolución del virus por país)
data_confirmed_sub <- data_confirmed %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
group_by(`Province.State`, `Country/Region`, date, Lat, Long) %>%
summarise("confirmed" = sum(value, na.rm = T))
data_recovered_sub <- data_recovered %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_recovered)) %>%
group_by(`Province.State`, `Country/Region`, date, Lat, Long) %>%
summarise("recovered" = sum(value, na.rm = T))
data_deceased_sub <- data_deceased %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_deceased)) %>%
group_by(`Province.State`, `Country/Region`, date, Lat, Long) %>%
summarise("deceased" = sum(value, na.rm = T))
data_evolution <- data_confirmed_sub %>%
full_join(data_recovered_sub) %>%
rbind(data_deceased_sub) %>%
ungroup() %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
arrange(date) %>%
group_by(`Province/State`, `Country/Region`, Lat, Long) %>%
fill(confirmed, recovered, deceased) %>%
replace_na(list(deceased = 0, confirmed = 0)) %>%
mutate(
recovered_est = lag(confirmed, 14, default = 0) - deceased,
recovered_est = ifelse(recovered_est > 0, recovered_est, 0),
recovered     = coalesce(recovered, recovered_est),
active        = confirmed - recovered - deceased
) %>%
select(-recovered_est) %>%
pivot_longer(names_to = "var", cols = c(confirmed, recovered, deceased, active)) %>%
filter(!(is.na(`Province/State`) && `Country/Region` == "US")) %>%
filter(!(Lat == 0 & Long == 0)) %>%
ungroup()
# Calculamos la evolución del virus y eliminamos los datos que no necesitamos
data_evolution <- data_evolution %>%
group_by(`Province/State`, `Country/Region`) %>%
mutate(value_new = value - lag(value, 4, default = 0)) %>%
ungroup()
data_confirmed    <- read_csv("./Appcovid/data/time_series_covid19_confirmed_global.csv")
data_deceased     <- read_csv("./Appcovid/data/time_series_covid19_deaths_global.csv")
data_recovered    <- read_csv("./Appcovid/data/time_series_covid19_recovered_global.csv")
data_confirmed_sub <- data_confirmed %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
group_by(`Province.State`, `Country/Region`, date, Lat, Long) %>%
summarise("confirmed" = sum(value, na.rm = T))
data_recovered_sub <- data_recovered %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_recovered)) %>%
group_by(`Province.State`, `Country/Region`, date, Lat, Long) %>%
summarise("recovered" = sum(value, na.rm = T))
data_deceased_sub <- data_deceased %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_deceased)) %>%
group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
summarise("deceased" = sum(value, na.rm = T))
data_evolution <- data_confirmed_sub %>%
full_join(data_recovered_sub) %>%
rbind(data_deceased_sub) %>%
ungroup() %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
arrange(date) %>%
group_by(`Province/State`, `Country/Region`, Lat, Long) %>%
fill(confirmed, recovered, deceased) %>%
replace_na(list(deceased = 0, confirmed = 0)) %>%
mutate(
recovered_est = lag(confirmed, 14, default = 0) - deceased,
recovered_est = ifelse(recovered_est > 0, recovered_est, 0),
recovered     = coalesce(recovered, recovered_est),
active        = confirmed - recovered - deceased
) %>%
select(-recovered_est) %>%
pivot_longer(names_to = "var", cols = c(confirmed, recovered, deceased, active)) %>%
filter(!(is.na(`Province/State`) && `Country/Region` == "US")) %>%
filter(!(Lat == 0 & Long == 0)) %>%
ungroup()
# Calculamos la evolución del virus y eliminamos los datos que no necesitamos
data_evolution <- data_evolution %>%
group_by(`Province/State`, `Country/Region`) %>%
mutate(value_new = value - lag(value, 4, default = 0)) %>%
ungroup()
e
#Eliminamos los datos que ya no nos sirven
rm(data_confirmed, data_confirmed_sub, data_recovered, data_recovered_sub, data_deceased, data_deceased_sub)
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province.State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
}
last_date <- max(data_evolution$date)
last_date
data_latest <- data_atDate(last_date)
top5_countries <- data_evolution %>%
filter(var == "active", date == current_date) %>%
group_by(`Country/Region`) %>%
summarise(value = sum(value, na.rm = T)) %>%
arrange(desc(value)) %>%
top_n(5) %>%
select(`Country/Region`) %>%
pull()
current_date <- as.Date(names(data_confirmed)[ncol(data_confirmed)], format = "%m/%d/%y")
top5_countries <- data_evolution %>%
filter(var == "active") %>%
group_by(`Country/Region`) %>%
summarise(value = sum(value, na.rm = T)) %>%
arrange(desc(value)) %>%
top_n(5) %>%
select(`Country/Region`) %>%
pull()
wldometer_World     <- sprintf("%s/worldometersContinent_%s.csv",PATH_DATA,nowdate)
wldometer_Country   <- sprintf("%s/worldometersCountry_%s.csv",PATH_DATA,nowdate)
wldometer_Continent <- sprintf("%s/worldometersWorld_%s.csv",PATH_DATA,nowdate)
omsGlobal           <- sprintf("%s/globalDataOMS_%s.csv",PATH_DATA,nowdate)
global_COvidDataOMS               <- read.csv(omsGlobal)
global_COvidDataWDMeterWorld      <- read.csv(wldometer_World)
global_COvidDataWDMeterCountry    <- read.csv(wldometer_Country)
global_COvidDataWDMeterContinent  <- read.csv(wldometer_Continent)
PATH_DATA                 <-"./Appcovid/data"
wldometer_World     <- sprintf("%s/worldometersContinent_%s.csv",PATH_DATA,nowdate)
wldometer_Country   <- sprintf("%s/worldometersCountry_%s.csv",PATH_DATA,nowdate)
wldometer_Continent <- sprintf("%s/worldometersWorld_%s.csv",PATH_DATA,nowdate)
omsGlobal           <- sprintf("%s/globalDataOMS_%s.csv",PATH_DATA,nowdate)
#sp_COvidData            <- data.frame()
#cv_COvidData            <- data.frame()
global_COvidDataOMS               <- read.csv(omsGlobal)
global_COvidDataWDMeterWorld      <- read.csv(wldometer_World)
global_COvidDataWDMeterCountry    <- read.csv(wldometer_Country)
global_COvidDataWDMeterContinent  <- read.csv(wldometer_Continent)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterCountry)
shiny::runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
View(data_evolution)
View(data_evolution)
data_evolution <- data_confirmed_sub %>%
full_join(data_recovered_sub) %>%
rbind(data_deceased_sub) %>%
ungroup() %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
arrange(date) %>%
group_by(`Province/State`, `Country/Region`, Lat, Long) %>%
fill(confirmed, recovered, deceased) %>%
replace_na(list(deceased = 0, confirmed = 0)) %>%
mutate(
recovered_est = lag(confirmed, 14, default = 0) - deceased,
recovered_est = ifelse(recovered_est > 0, recovered_est, 0),
recovered     = coalesce(recovered, recovered_est),
active        = confirmed - recovered - deceased
) %>%
dplyr::select(-recovered_est) %>%
pivot_longer(names_to = "var", cols = c(confirmed, recovered, deceased, active)) %>%
filter(!(is.na(`Province/State`) && `Country/Region` == "US")) %>%
filter(!(Lat == 0 & Long == 0)) %>%
ungroup()
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
}
last_date <- max(data_evolution$date)
data_latest <- data_atDate(last_date)
top5_countries <- data_evolution %>%
filter(var == "active") %>%
group_by(`Country/Region`) %>%
summarise(value = sum(value, na.rm = T)) %>%
arrange(desc(value)) %>%
top_n(5) %>%
dplyr::select(`Country/Region`) %>%
pull()
sdplyr
))
View(data_evolution)
View(data_evolution)
# Calculamos la evolución del virus y eliminamos los datos que no necesitamos
data_evolution <- data_evolution %>%
group_by(`Province/State`, `Country/Region`) %>%
mutate(value_new = value - lag(value, 4, default = 0)) %>%
ungroup()
#Eliminamos los datos que ya no nos sirven
rm(data_confirmed, data_confirmed_sub, data_recovered, data_recovered_sub, data_deceased, data_deceased_sub)
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
}
last_date <- max(data_evolution$date)
data_latest <- data_atDate(last_date)
data_latest <- data_atDate(last_date)
last_date <- max(data_evolution$date)
last_date <- max(data_evolution$date)
inputDate <- last_date
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct()
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value)
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct()
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value)
runApp('AppCOVID')
dd <- data_evolution[which(data_evolution$date == inputDate),] %>%
distinct()
view (dd)
dd <- data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>% filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
dd <- data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>% filter(vr > 0 )
dd <- data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>% filter(var > 0 )
view (dd)
dd %>%  pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long"), names_from = var, values_from = value)
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
global_COvidDataWDMeterWorld
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataOMS)
population <- global_COvidDataWDMeterWorld$Population
global_COvidDataWDMeterWorld$TotalCases
global_COvidDataWDMeterWorld$TotalCases
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterCountry)
runApp('AppCOVID')
population <- global_COvidDataWDMeterWorld$Population
View(global_COvidDataWDMeterWorld)
population <- global_COvidDataWDMeterWorld$Population
t <- global_COvidDataWDMeterWorld$TotalCases
t
t/population
(t/population)*100
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
View(global_COvidDataOMS)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterCountry)
View(data_evolution)
runApp('AppCOVID')
View(global_COvidDataOMS)
View(global_COvidDataWDMeterCountry)
runApp()
runApp()
runApp()
runApp()
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
shiny::runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
