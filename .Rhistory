for(i in 1:nrow(global_COvidDataOMS)) {
if  (layer_world[i]$ISO3 %in% global_COvidDataOMS$ISO3) {
layer_world[i]$casesCumulative = getValueVar (layer_world[i]$ISO3,"casesCumulative")
layer_world[i]$deathsCumulative = getValueVar (layer_world[i]$ISO3,"deathsCumulative")
layer_world[i]$transmisionType = getValueVar (layer_world[i]$ISO3,"transmisionType")
layer_world[i]$reported24h = getValueVar (layer_world[i]$ISO3,"reported24h")
} else {
layer_world[i]$casesCumulative = 0
layer_world[i]$deathsCumulative = 0
layer_world[i]$transmisionType = 0
layer_world[i]$reported24h = 0
}
}
getValueVar <- function (cod,var) {
global_COvidDataOMS [which(global_COvidDataOMS$ISO3 == cod),var]
}
layer_world %>% mutate (
casesCumulative  =  ifelse ((ISO3 %in% global_COvidDataOMS$ISO3),
getValueVar (ISO3,"casesCumulative"), 0),
deathsCumulative =  ifelse ((ISO3 %in%global_COvidDataOMS$ISO3),
global_COvidDataOMS$deathsCumulative  [which(global_COvidDataOMS$ISO3 == ISO3)], 0),
transmisionType  =  ifelse ((ISO3 %in%global_COvidDataOMS$ISO3),
global_COvidDataOMS$transmisionType  [which(global_COvidDataOMS$ISO3 == ISO3)], 0),
reported24h      =  ifelse ((ISO3 %in%global_COvidDataOMS$ISO3),
global_COvidDataOMS$reported24h  [which(global_COvidDataOMS$ISO3 == ISO3)], 0)
)
casesCumulative <- lapply(layer_world$ISO3,getValueVar, var="casesCumulative")
str(casesCumulative )
getValueVar <- function (cod,var) {
if(cod %in% global_COvidDataOMS$ISO3)
global_COvidDataOMS [which(global_COvidDataOMS$ISO3 == cod),var]
else
0
}
casesCumulative <- lapply(layer_world$ISO3,getValueVar, var="casesCumulative")
casesCumulative  [1]
casesCumulative  %>% unlist()
layer_worl$casesCumulative <-    casesCumulative  %>% unlist()
layer_wordl$casesCumulative <-    casesCumulative  %>% unlist()
layer_world$casesCumulative <- casesCumulative  %>% unlist()
View(layer_world)
path_shpWorld <- "./appcovid/data/wordlMap/TM_WORLD_BORDERS_SIMPL-0.3.shp"
layer_world    <- st_read(path_shpWorld)
#Cambio la proyecciÃ³n
layer_world   <- st_transform(layer_world,4326)
getValueVar <- function (cod,var) {
if(cod %in% global_COvidDataOMS$ISO3)
global_COvidDataOMS [which(global_COvidDataOMS$ISO3 == cod),var]
else
0
}
casesCumulative <- lapply(layer_world$ISO3,getValueVar, var="casesCumulative")
layer_world$casesCumulative <- casesCumulative  %>% unlist()
deathsCumulative <-   lapply(layer_world$ISO3,getValueVar, var="deathsCumulative")
layer_world$deathsCumulative <- deathsCumulative  %>% unlist()
transmisionType <-  lapply(layer_world$ISO3,getValueVar, var="transmisionType")
layer_world$transmisionType <- transmisionType  %>% unlist()
reported24h    <-  lapply(layer_world$ISO3,getValueVar, var="reported24h")
layer_world$reported24h <- reported24h  %>% unlist()
palBin <- colorBin ("magma", bins = 10, domain= layer_world$casesCumulative,na.color='transparent')
popup <- addLabelOMS (dataOMS_first)
mapOMSContinent <- leaflet(addLabelOMS (layer_world)) %>%
setMaxBounds(-180, -90, 180, 90) %>%
setView(0, 20, zoom = 2) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron, group = "Light") %>%
addProviderTiles(providers$HERE.satelliteDay, group = "Satellite") %>%
addLayersControl(
baseGroups    = c("Light", "Satellite")
) %>%
addEasyButton(easyButton(
icon    = "glyphicon glyphicon-globe", title = "Reset zoom",
onClick = JS("function(btn, map){ map.setView([20, 0], 2); }"))) %>%
addEasyButton(easyButton(
icon    = "glyphicon glyphicon-map-marker", title = "Locate Me",
onClick = JS("function(btn, map){ map.locate({setView: true, maxZoom: 6}); }"))) %>%
addPolygons(color = "#444444" ,
weight = 1,
smoothFactor = 0.5,
opacity = 1.0,
fillOpacity = 0.5,
fillColor = ~palnumeric (layer_world$casesCumulative),   # Color de llenado
data= layer_world,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE), #highlight cuando pasas el cursor
labelOptions = labelOptions(direction = "auto"),
popup = popup) %>%
addLegend(title = "Cumulative Cases", pal = palQuantile, values = layer_world$casesCumulative,
position = "bottomright")
mapOMSContinent
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp()
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
View(proxy_summaryDT_state)
View(proxy_summaryDT_state)
force(input)
runApp('appcovid')
runApp()
runApp('appcovid')
View(mapOMSContinent)
runApp('appcovid')
shiny::runApp('appcovid')
runApp('appcovid')
selectize_acumulate_Variable
input$selectize_acumulate_Variable
input$selectize_acumulate_type
input$global_map_zoom
runApp('appcovid')
mapOMSContinent
View(global_COvidDataOMS)
View(global_COvidDataOMS)
runApp('appcovid')
mapOMSContinent
input$selectize_acumulate_type
mapOMSContinent
input$selectize_acumulate_type
selectize_acumulate_Variable
c
c
input$selectize_acumulate_Variable
runApp('appcovid')
mapOMSContinent
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
View(layer_world)
View(layer_world)
runApp('appcovid')
runApp('appcovid')
mapOMS
runApp('appcovid')
View(df)
runApp('appcovid')
runApp('appcovid')
dataOMS_atFilter(input$selectize_acumulate_type)
runApp('appcovid')
runApp('appcovid')
dataOMS
data
View(getValueVar)
runApp('appcovid')
dataOMS
typetrasnmision
typetrasnmision
data
runApp('appcovid')
data
runApp('appcovid')
data
dataOMS
typetrasnmision
layer_world %>%
filter (transmisionType %in% typetrasnmision)
View(global_COvidDataOMS)
View(global_COvidDataOMS)
runApp('appcovid')
data
dataOMS
dataOMS
runApp('appcovid')
dataOMS
runApp('appcovid')
df
str(df)
dataOMS
df
runApp('appcovid')
runApp('appcovid')
runApp()
runApp()
runApp('appcovid')
runApp()
df
View(global_COvidDataOMS)
View(global_COvidDataOMS)
runApp('appcovid')
typetrasnmision
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
mapOMS
runApp('appcovid')
runApp('appcovid')
input$selectize_acumulate_Variable
View(data)
View(data)
runApp('appcovid')
input$selectize_acumulate_Variable
runApp('appcovid')
popup
mapOMS
runApp('appcovid')
runApp('appcovid')
data
input$selectize_acumulate_type
?leaflet
runApp('appcovid')
runApp('appcovid')
runApp()
runApp()
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
strftime(Sys.Date(), format = "%d.%m.%Y")
View(dataOMS)
shiny::runApp('appcovid')
runApp()
runApp()
runApp()
global_COvidDataWDMeterWorld$world
global_COvidDataWDMeterWorld$ActiveCases
runApp('appcovid')
strftime(current_date, format = "%d.%m.%Y")
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp()
runApp()
runApp('appcovid')
runApp('appcovid')
runApp()
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp()
n
n
n
s
f
c
runApp('appcovid')
runApp('appcovid')
runApp()
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
global_COvidDataWDMeterCountry
global_COvidDataWDMeterContinent
total <- global_COvidDataWDMeterWorld$world
global_COvidDataWDMeterContinent$prop <- global_COvidDataWDMeterContinent %>%
mutate ( prop = continent/total)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
total <- global_COvidDataWDMeterWorld$world
global_COvidDataWDMeterContinent$prop <- global_COvidDataWDMeterContinent %>%
mutate ( prop = continent/total,
prop_cont = continent/sum(continent)
)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
names(global_COvidDataWDMeterContinent)
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
names (global_COvidDataWDMeterContinent)
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
body_globalWDM <-   fluidRow(
fluidRow(
uiOutput("box_globalDataWorld")
),
fluidRow(
box(width = 12,
class = "summaryWDMEter",
style = 'padding:0px;',
column(
plotOutput("globalCases_ContinentWDMETER"),
width = 6,
),
column(
plotOutput("globalDeatchs_ContinentWDMETER"),
width = 6,
)
),
box(width = 12,
column(
plotOutput("globalRecovered_ContinentWDMETER"),
width = 6,
),
column(
plotOutput("globalTests_ContinentWDMETER"),
width = 6,
)
)
)
)
runApp('appcovid')
View(dataOMS_atFilter)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
runApp('appcovid')
runApp('appcovid')
runApp('appcovid')
source('app.R')
source('app.R')
library(shiny); source('app.R')
source('app.R')
library(shiny); source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataOMS)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterWorld)
source('app.R')
View(global_COvidDataOMS)
View(global_COvidDataOMS)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterContinent)
source('app.R')
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
names(global_COvidDataWDMeterContinent)
source('app.R')
source('app.R')
source('app.R')
files  <-  list.files(path=PATH__RECOMEN_IMG_OMS,pattern='*.png')
PATH__RECOMEN_IMG_OMS
source('app.R')
#Copiamos al directorio cache (www)  y al directorio data los ficheros png
lapply(files, function(x) file.copy(paste (PATH__RECOMEN_IMG_OMS, x , sep = "/"),
paste ("www",x, sep = "/"), recursive = FALSE,  copy.mode = TRUE))
source('app.R')
runApp()
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
runApp('AppCOVID')
View(global_COvidDataWDMeterCountry)
View(global_COvidDataOMS)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataOMS)
runApp('AppCOVID')
runApp('AppCOVID')
View(donwload_scrapingWorldometers)
View(donwload_scrapingWorldometers)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
source('app.R')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
runApp()
runApp('AppCOVID')
View(global_COvidDataOMS)
View(global_COvidDataOMS)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
source('app.R')
source('app.R')
source('app.R')
source('app.R')
runApp('AppCOVID')
source('app.R')
runApp('AppCOVID')
source('app.R')
runApp('AppCOVID')
runApp()
runApp('AppCOVID')
View(global_COvidDataOMS)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterWorld)
source('app.R')
source('app.R')
runApp('AppCOVID')
url_world  <- "https://www.worldometers.info/coronavirus/"
my_table<- url_world %>% read_html() %>% html_table() %>%.[[1]]
my_table[]<-lapply(my_table, function(x) (gsub("\\,|\\+", "", (x))))
names(my_table) <- PKI_WD
View(my_table)
my_table <- my_table %>% dplyr::select(-c(Id))
continent <-  my_table[1:6,]
names(continent)[2] <- 'continent'
world     <-  my_table[8,]
names(world)[2] <- 'world'
contry    <-  my_table[9:230,]
names(contry)[2] <- 'contry'
View(continent)
View(continent)
my_table <- my_table %>% dplyr::select(-c(Id))
continent <-  my_table[1:6,]
View(continent)
View(continent)
rm(continent)
View(my_table)
#Descargamos el fichero de   worldometers con web scraping y guardamos los tres ficheros en local
my_table<- url_world %>% read_html() %>% html_table() %>%.[[1]]
my_table[]<-lapply(my_table, function(x) (gsub("\\,|\\+", "", (x))))
names(my_table) <- PKI_WD
my_table <- my_table %>% dplyr::select(-c(Id))
View(my_table)
continent <-  my_table[1:6,]
names(continent)[1] <- 'continent'
world     <-  my_table[8,]
contry    <-  my_table[9:230,]
names(contry)[1] <- 'contry'
View(contry)
View(continent)
View(world)
world     <-  my_table[8,]
names(world)[1] <- 'world'
View(world)
View(world)
fCont <- createFilename (path=PATH_DATA,name="worldometersContinent")
write.csv(continent,fCont,row.names = FALSE)
fworld <- createFilename (path=PATH_DATA,name="worldometersWorld")
write.csv(world,fworld,row.names = FALSE)
fcountry <- createFilename (path=PATH_DATA,name="worldometersCountry")
write.csv(contry,fcountry,row.names = FALSE)
fCont <- createFilename (path=PATH_DATA,name="worldometersContinent")
write.csv(continent,fCont,row.names = FALSE)
fworld <- createFilename (path=PATH_DATA,name="worldometersWorld")
write.csv(world,fworld,row.names = FALSE)
fcountry <- createFilename (path=PATH_DATA,name="worldometersCountry")
write.csv(contry,fcountry,row.names = FALSE)
source('app.R')
source('app.R')
library(shiny); source('app.R')
source('app.R')
View(casos_cc)
shiny::runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
shiny::runApp('AppCOVID')
runApp('AppCOVID')
?replaceData
?dataTableProxy
shiny::runApp('AppCOVID')
runApp('AppCOVID')
library(shiny); source('app.R')
