View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterWorld)
View(global_COvidDataWDMeterWorld)
source('app.R')
runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
runApp()
runApp()
runApp('AppCOVID')
View(global_COvidDataOMS)
View(global_COvidDataOMS)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterContinent)
source('app.R')
source('app.R')
source('app.R')
source('app.R')
runApp('AppCOVID')
source('app.R')
runApp('AppCOVID')
source('app.R')
runApp('AppCOVID')
runApp()
runApp('AppCOVID')
View(global_COvidDataOMS)
View(global_COvidDataWDMeterContinent)
View(global_COvidDataWDMeterCountry)
View(global_COvidDataWDMeterWorld)
source('app.R')
source('app.R')
runApp('AppCOVID')
url_world  <- "https://www.worldometers.info/coronavirus/"
my_table<- url_world %>% read_html() %>% html_table() %>%.[[1]]
my_table[]<-lapply(my_table, function(x) (gsub("\\,|\\+", "", (x))))
names(my_table) <- PKI_WD
View(my_table)
my_table <- my_table %>% dplyr::select(-c(Id))
continent <-  my_table[1:6,]
names(continent)[2] <- 'continent'
world     <-  my_table[8,]
names(world)[2] <- 'world'
contry    <-  my_table[9:230,]
names(contry)[2] <- 'contry'
View(continent)
View(continent)
my_table <- my_table %>% dplyr::select(-c(Id))
continent <-  my_table[1:6,]
View(continent)
View(continent)
rm(continent)
View(my_table)
#Descargamos el fichero de   worldometers con web scraping y guardamos los tres ficheros en local
my_table<- url_world %>% read_html() %>% html_table() %>%.[[1]]
my_table[]<-lapply(my_table, function(x) (gsub("\\,|\\+", "", (x))))
names(my_table) <- PKI_WD
my_table <- my_table %>% dplyr::select(-c(Id))
View(my_table)
continent <-  my_table[1:6,]
names(continent)[1] <- 'continent'
world     <-  my_table[8,]
contry    <-  my_table[9:230,]
names(contry)[1] <- 'contry'
View(contry)
View(continent)
View(world)
world     <-  my_table[8,]
names(world)[1] <- 'world'
View(world)
View(world)
fCont <- createFilename (path=PATH_DATA,name="worldometersContinent")
write.csv(continent,fCont,row.names = FALSE)
fworld <- createFilename (path=PATH_DATA,name="worldometersWorld")
write.csv(world,fworld,row.names = FALSE)
fcountry <- createFilename (path=PATH_DATA,name="worldometersCountry")
write.csv(contry,fcountry,row.names = FALSE)
fCont <- createFilename (path=PATH_DATA,name="worldometersContinent")
write.csv(continent,fCont,row.names = FALSE)
fworld <- createFilename (path=PATH_DATA,name="worldometersWorld")
write.csv(world,fworld,row.names = FALSE)
fcountry <- createFilename (path=PATH_DATA,name="worldometersCountry")
write.csv(contry,fcountry,row.names = FALSE)
source('app.R')
source('app.R')
library(shiny); source('app.R')
source('app.R')
View(casos_cc)
shiny::runApp('AppCOVID')
runApp('AppCOVID')
runApp('AppCOVID')
shiny::runApp('AppCOVID')
runApp('AppCOVID')
?replaceData
?dataTableProxy
shiny::runApp('AppCOVID')
runApp('AppCOVID')
library(shiny); source('app.R')
shiny::runApp('AppCOVID')
source('app.R')
runApp('AppCOVID')
source('app.R')
source('app.R')
library(shiny); source('app.R')
library(shiny); source('app.R')
source('app.R')
#######################################
## FICHEROS DE DATOS
########################################
nowdate <- Sys.Date ()
DEBUG <- TRUE
PATH_DATA                 <-"./data"
PATH__RECOMEN_IMG_OMS     <-"./data/RECOM/OMS"
STANDBY_TIME    <- 15
PKI_OMS         <- c("Name","Region","casesCumulative","cumulative100000p","reported7d","reported7d100000p",
"reported24h","deathsCumulative","deathsCumulative100000p","deathsreported7d",
"deathsreported7d100000p","deathsreported24h","transmisionType")
PKI_WD          <- c('Id','World-country-continental','TotalCases','NewCases','TotalDeaths','NewDeaths','TotalRecovered',
'NewRecovered','ActiveCases','CritcalCase','TotalCase1M','DeathsCase1M','TotalTests','test1Mpop',
'Population','Continent','Caseevery','Deathevery','Testevery','newCase1M','deathsCase1M','ActiveCas1M')
i18n <- Translator$new(translation_json_path = "./translations/translations.json")
i18n$set_translation_language("es")
df <- data.frame(
val = i18n$get_languages()
)
#Pongo la bandera del idioma en el selectinput, al lado de su código locale.
df$img <- lapply (1:length(df$val),function (i) {
img_lang <- paste (str_trim(df$val[i]),"ico",sep=".")
sprintf("<div class='jhr'><img src=\'/img/%s\',width=30px,style=\'vertical-align:middle\' >%s</img></div>",img_lang, df$val[i])
})
## Si no existe el fichero los actualizamos
wldometer_World     <- sprintf("%s/worldometersWorld_%s.csv",PATH_DATA,nowdate)
wldometer_Country   <- sprintf("%s/worldometersCountry_%s.csv",PATH_DATA,nowdate)
wldometer_Continent <- sprintf("%s/worldometersContinent_%s.csv",PATH_DATA,nowdate)
omsGlobal           <- sprintf("%s/globalDataOMS_%s.csv",PATH_DATA,nowdate)
#Ficheros serie temporal covid-19
jhonH_confirmed    <- sprintf("%s/time_series_covid19_confirmed_global.csv",PATH_DATA)
jhonH_deceased     <- sprintf("%s/time_series_covid19_deaths_global.csv",PATH_DATA)
jhonH_recovered    <- sprintf("%s/time_series_covid19_recovered_global.csv",PATH_DATA)
jhonH_confirmed_n     <- sprintf("%s/time_series_covid19_confirmed_global_%s.csv",PATH_DATA,nowdate)
jhonH_deceased_n      <- sprintf("%s/time_series_covid19_deaths_global_%s.csv",PATH_DATA,nowdate)
jhonH_recovered_n     <- sprintf("%s/time_series_covid19_recovered_global_%s.csv",PATH_DATA,nowdate)
#Datos de España por comunidad
spdata_CC     <- sprintf("%s/casos_diagnostico_ccaa_%s.csv",PATH_DATA,nowdate)
files  <-  list.files(path=PATH__RECOMEN_IMG_OMS,pattern='*.png')
l   <- length(files)
mytabs <- NULL
if (l<=0) {
url_recomendationsOMS ='https://www.who.int/es/emergencies/diseases/novel-coronavirus-2019/advice-for-public'
html <-  url_recomendationsOMS  %>% read_html()
#obtenemos sólo los poster resumen de las recomendaciones de la OMS
images <- html %>% html_nodes(".lazy") %>% lapply(., function (node) {
df <- NULL
is_corona <- node %>% html_attr ('data-src')%>%grepl('coronavirus',.)
if(is_corona) {
printApp (node %>% html_attr ('alt') )
alt  <- node %>% html_attr ('alt')
is_ptr <- alt %>% stringr::str_locate (.,"^COVID-19 :")
printApp (is_ptr)
label <- alt
if(!is.na(is_ptr[[2]]))
label <- str_trim(substring(alt,is_ptr[[2]]+1))
label <- gsub (" ","_",label)
printApp (label)
filename <- paste(PATH__RECOMEN_IMG_OMS,str_trim(label),sep='/')
filename <- paste(str_trim(filename),'png',sep='.')
printApp (filename)
href <- paste ("https://www.who.int",node %>% html_attr ('data-image'),sep='/')
print(href)
df <- data.frame (title =alt,href=href)
download.file(href, destfile = filename, mod = "wb")
#download.file(href, destfile = "./www", mod = "wb")
}
df
url_CSVOMS <- "https://covid19.who.int/WHO-COVID-19-global-table-data.csv"
url_world  <- "https://www.worldometers.info/coronavirus/"
url_sp     <- "https://cnecovid.isciii.es/covid19/resources/casos_diagnostico_ccaa.csv"
data_file <- read.csv(url_CSVOMS)
names(data_file) <-  PKI_OMS
write.csv(data_file,filename,row.names = FALSE)
my_table        <- url_world %>% read_html() %>% html_table() %>%.[[1]]
my_table[]      <- lapply(my_table, function(x) (gsub("\\,|\\+", "", (x))))
names(my_table) <- PKI_WD
my_table        <- my_table %>% dplyr::select(-c(Id))
continent       <- my_table[1:6,]
names(continent)[1] <- 'continent'
world     <-  my_table[8,]
names(world)[1] <- 'world'
contry    <-  my_table[9:230,]
names(contry)[1] <- 'contry'
fCont <- createFilename (path=PATH_DATA,name="worldometersContinent")
write.csv(continent,fCont,row.names = FALSE)
fworld <- createFilename (path=PATH_DATA,name="worldometersWorld")
write.csv(world,fworld,row.names = FALSE)
fcountry <- createFilename (path=PATH_DATA,name="worldometersCountry")
write.csv(contry,fcountry,row.names = FALSE)
url_Confirmed_JH = "https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv&filename=time_series_covid19_confirmed_global.csv"
url_deaths_JH = "https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv&filename=time_series_covid19_deaths_global.csv"
url_recovered_JH= "https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_recovered_global.csv&filename=time_series_covid19_recovered_global.csv"
data_file <- read.csv(url_Confirmed_JH)
write.csv(data_file,jhonH_confirmed_n,row.names = FALSE)
data_file <- read.csv(url_deaths_JH)
write.csv(data_file,jhonH_deceased_n,row.names = FALSE)
data_file <- read.csv(url_recovered_JH)
write.csv(data_file,jhonH_recovered_n,row.names = FALSE)
)
#########################
##
# Comprobamos si están los ficheros de recomendación
# si no están los descargamos
#################
is_filesRecomOMS <- function(){
files  <-  list.files(path=PATH__RECOMEN_IMG_OMS,pattern='*.png')
l   <- length(files)
mytabs <- NULL
#Si no están los ficheros los descargamos y los copiamos en local
if (l<=0) {
url_recomendationsOMS ='https://www.who.int/es/emergencies/diseases/novel-coronavirus-2019/advice-for-public'
html <-  url_recomendationsOMS  %>% read_html()
#obtenemos sólo los poster resumen de las recomendaciones de la OMS
images <- html %>% html_nodes(".lazy") %>% lapply(., function (node) {
df <- NULL
is_corona <- node %>% html_attr ('data-src')%>%grepl('coronavirus',.)
if(is_corona) {
printApp (node %>% html_attr ('alt') )
alt  <- node %>% html_attr ('alt')
is_ptr <- alt %>% stringr::str_locate (.,"^COVID-19 :")
printApp (is_ptr)
label <- alt
if(!is.na(is_ptr[[2]]))
label <- str_trim(substring(alt,is_ptr[[2]]+1))
label <- gsub (" ","_",label)
printApp (label)
filename <- paste(PATH__RECOMEN_IMG_OMS,str_trim(label),sep='/')
filename <- paste(str_trim(filename),'png',sep='.')
printApp (filename)
href <- paste ("https://www.who.int",node %>% html_attr ('data-image'),sep='/')
print(href)
df <- data.frame (title =alt,href=href)
download.file(href, destfile = filename, mod = "wb")
#download.file(href, destfile = "./www", mod = "wb")
}
df
})
}
}
url_CSVOMS <- "https://covid19.who.int/WHO-COVID-19-global-table-data.csv"
#Compruebo si no están los ficheros, Si no lo están los descargo y actualizo cada día
update_files()
library(leaflet)
source("./helpers/helpers.R")
DEBUG <- TRUE
PATH_DATA                 <-"./appcovid/data"
PATH__RECOMEN_IMG_OMS     <-"./appcovid/data/RECOM/OMS"
STANDBY_TIME    <- 15
PKI_OMS         <- c("Name","Region","casesCumulative","cumulative100000p","reported7d","reported7d100000p",
"reported24h","deathsCumulative","deathsCumulative100000p","deathsreported7d",
"deathsreported7d100000p","deathsreported24h","transmisionType")
PKI_WD          <- c('Id','World-country-continental','TotalCases','NewCases','TotalDeaths','NewDeaths','TotalRecovered',
'NewRecovered','ActiveCases','CritcalCase','TotalCase1M','DeathsCase1M','TotalTests','test1Mpop',
'Population','Continent','Caseevery','Deathevery','Testevery','newCase1M','deathsCase1M','ActiveCas1M')
i18n <- Translator$new(translation_json_path = "./translations/translations.json")
i18n$set_translation_language("es")
df <- data.frame(
val = i18n$get_languages()
)
nowdate <- Sys.Date ()
##PRimero comprobamos si existe el fichero del día actual
## Si no existe el fichero los actualizamos
wldometer_World     <- sprintf("%s/worldometersWorld_%s.csv",PATH_DATA,nowdate)
wldometer_Country   <- sprintf("%s/worldometersCountry_%s.csv",PATH_DATA,nowdate)
wldometer_Continent <- sprintf("%s/worldometersContinent_%s.csv",PATH_DATA,nowdate)
omsGlobal           <- sprintf("%s/globalDataOMS_%s.csv",PATH_DATA,nowdate)
#Ficheros serie temporal covid-19
jhonH_confirmed    <- sprintf("%s/time_series_covid19_confirmed_global.csv",PATH_DATA)
jhonH_deceased     <- sprintf("%s/time_series_covid19_deaths_global.csv",PATH_DATA)
jhonH_recovered    <- sprintf("%s/time_series_covid19_recovered_global.csv",PATH_DATA)
jhonH_confirmed_n     <- sprintf("%s/time_series_covid19_confirmed_global_%s.csv",PATH_DATA,nowdate)
jhonH_deceased_n      <- sprintf("%s/time_series_covid19_deaths_global_%s.csv",PATH_DATA,nowdate)
jhonH_recovered_n     <- sprintf("%s/time_series_covid19_recovered_global_%s.csv",PATH_DATA,nowdate)
#Datos de España por comunidad
spdata_CC     <- sprintf("%s/casos_diagnostico_ccaa_%s.csv",PATH_DATA,nowdate)
#########################
##
# Comprobamos si están los ficheros de recomendación
# si no están los descargamos
#################
is_filesRecomOMS <- function(){
files  <-  list.files(path=PATH__RECOMEN_IMG_OMS,pattern='*.png')
l   <- length(files)
mytabs <- NULL
#Si no están los ficheros los descargamos y los copiamos en local
if (l<=0) {
url_recomendationsOMS ='https://www.who.int/es/emergencies/diseases/novel-coronavirus-2019/advice-for-public'
html <-  url_recomendationsOMS  %>% read_html()
#obtenemos sólo los poster resumen de las recomendaciones de la OMS
images <- html %>% html_nodes(".lazy") %>% lapply(., function (node) {
df <- NULL
is_corona <- node %>% html_attr ('data-src')%>%grepl('coronavirus',.)
if(is_corona) {
printApp (node %>% html_attr ('alt') )
alt  <- node %>% html_attr ('alt')
is_ptr <- alt %>% stringr::str_locate (.,"^COVID-19 :")
printApp (is_ptr)
label <- alt
if(!is.na(is_ptr[[2]]))
label <- str_trim(substring(alt,is_ptr[[2]]+1))
label <- gsub (" ","_",label)
printApp (label)
filename <- paste(PATH__RECOMEN_IMG_OMS,str_trim(label),sep='/')
filename <- paste(str_trim(filename),'png',sep='.')
printApp (filename)
href <- paste ("https://www.who.int",node %>% html_attr ('data-image'),sep='/')
print(href)
df <- data.frame (title =alt,href=href)
download.file(href, destfile = filename, mod = "wb")
#download.file(href, destfile = "./www", mod = "wb")
}
df
})
}
}
update_files <- function () {
url_CSVOMS <- "https://covid19.who.int/WHO-COVID-19-global-table-data.csv"
url_world  <- "https://www.worldometers.info/coronavirus/"
url_sp     <- "https://cnecovid.isciii.es/covid19/resources/casos_diagnostico_ccaa.csv"
#Descargamos el fichero de la OMS y lo guardamos en local
filename <- createFilename (path=PATH_DATA,name="globalDataOMS")
if(!file.exists(filename)) {
data_file <- read.csv(url_CSVOMS)
names(data_file) <-  PKI_OMS
write.csv(data_file,filename,row.names = FALSE)
}
if(!file.exists(wldometer_World)) {
#Descargamos el fichero de   worldometers con web scraping y guardamos los tres ficheros en local
my_table        <- url_world %>% read_html() %>% html_table() %>%.[[1]]
my_table[]      <- lapply(my_table, function(x) (gsub("\\,|\\+", "", (x))))
names(my_table) <- PKI_WD
my_table        <- my_table %>% dplyr::select(-c(Id))
continent       <- my_table[1:6,]
names(continent)[1] <- 'continent'
world     <-  my_table[8,]
names(world)[1] <- 'world'
contry    <-  my_table[9:230,]
names(contry)[1] <- 'contry'
fCont <- createFilename (path=PATH_DATA,name="worldometersContinent")
write.csv(continent,fCont,row.names = FALSE)
fworld <- createFilename (path=PATH_DATA,name="worldometersWorld")
write.csv(world,fworld,row.names = FALSE)
fcountry <- createFilename (path=PATH_DATA,name="worldometersCountry")
write.csv(contry,fcountry,row.names = FALSE)
}
#Comprobamos si existen los ficheros de serie temporal, Sino están en local, los descargamos
if(!file.exists(jhonH_confirmed_n)) {
url_Confirmed_JH = "https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv&filename=time_series_covid19_confirmed_global.csv"
url_deaths_JH = "https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv&filename=time_series_covid19_deaths_global.csv"
url_recovered_JH= "https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_recovered_global.csv&filename=time_series_covid19_recovered_global.csv"
data_file <- read.csv(url_Confirmed_JH)
write.csv(data_file,jhonH_confirmed_n,row.names = FALSE)
data_file <- read.csv(url_deaths_JH)
write.csv(data_file,jhonH_deceased_n,row.names = FALSE)
data_file <- read.csv(url_recovered_JH)
write.csv(data_file,jhonH_recovered_n,row.names = FALSE)
}
#Descargamos datos de  España
if(!file.exists(spdata_CC)) {
filename <- createFilename (path=PATH_DATA,name="casos_diagnostico_ccaa")
data_file <- read.csv(url_sp)
write.csv(data_file,filename,row.names = FALSE)
}
}
#Compruebo si no están los ficheros, Si no lo están los descargo y actualizo cada día
update_files()
#Ficheros de recomendacion de la OMS
is_filesRecomOMS ()
global_COvidDataOMS               <- NULL
global_COvidDataWDMeterWorld      <- NULL
global_COvidDataWDMeterCountry    <- NULL
global_COvidDataWDMeterContinent  <- NULL
#Ficheros serie temporal covid-19
data_confirmed    <- NULL
data_deceased     <- NULL
data_recovered    <- NULL
#Ficheros COvid-19 España
casos_cc          <- NULL
global_COvidDataOMS               <- read.csv(omsGlobal)
global_COvidDataWDMeterWorld      <- read.csv(wldometer_World)
global_COvidDataWDMeterCountry    <- read.csv(wldometer_Country)
global_COvidDataWDMeterContinent  <- read.csv(wldometer_Continent)
###Serie temporal COVID-19
#datos serie temporales. Los tenemos ya descargados para hacer un poco de todo
# Si se desean descargar los csv se encuentran:
#"https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv&filename=time_series_covid19_confirmed_global.csv"
data_confirmed    <- read_csv(jhonH_confirmed_n)
data_deceased     <- read_csv(jhonH_deceased_n)
data_recovered    <- read_csv(jhonH_recovered_n)
##Datos España por comunidades
casos_cc    <- read.csv(spdata_CC)
View(data_confirmed)
dataOMS <-global_COvidDataOMS %>%
filter(Name != 'Global') %>%
dplyr::select(Name, casesCumulative, deathsCumulative, reported24h, transmisionType)
getValueVar <- function (cod,var) {
ifelse((cod %in% global_COvidDataOMS$ISO3),
global_COvidDataOMS [which(global_COvidDataOMS$ISO3 == cod),var], 0)
}
dataOMS_atFilter <- function (typetrasnmision) {
result  <- tryCatch ({
if (!is.null(typetrasnmision)&& !is.na(typetrasnmision))
global_COvidDataOMS %>%
dplyr::filter (transmisionType %in% typetrasnmision)
else
global_COvidDataOMS
},
warning = function(w) {
if(DEBUG) cat('\n\n - This is warning dataOMS_atFilter \n\n')
printApp(w)
return (w)
},
error = function(e) {
if(DEBUG) cat('\n\n - This is error dataOMS_atFilter \n\n')
printApp(e)
return (NULL)
},
finally = {if (DEBUG) cat ('\n\n -  Salgo de ::> dataOMS_atFilter\n\n')})
}
update_dataOMS <- function (filterType) {
dt <- lapply(global_COvidDataOMS$transmisionType,FUN=function(x) ifelse(x %in% filterType,1,0))
global_COvidDataOMS [which(dt ==1),] %>% dplyr::select(Name,casesCumulative,deathsCumulative,reported24h,transmisionType)
}
update_dataOMS <- function (filterType) {
dt <- lapply(global_COvidDataOMS$transmisionType,FUN=function(x) ifelse(x %in% filterType,1,0))
global_COvidDataOMS [which(dt ==1),] %>% dplyr::select(Name,casesCumulative,deathsCumulative,reported24h,transmisionType)
}
data_CONTINENTWDMETER  <- global_COvidDataWDMeterContinent %>% dplyr::select (c(continent,TotalCases,TotalDeaths,TotalRecovered,ActiveCases))
data_CONTINENTWDMETER  <- data_CONTINENTWDMETER %>%
mutate ( prop_cont       = (TotalCases/sum(TotalCases))*100,
prop_deatchs    = (TotalDeaths/sum(TotalDeaths))*100,
prop_Recovered  = (TotalRecovered/sum(TotalRecovered))*100,
prop_Active     = (ActiveCases/sum(ActiveCases))*100
)
data_confirmed_sub <- data_confirmed %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
summarise("confirmed" = sum(value, na.rm = T))
# casos confirmados
data_confirmed_sub <- data_confirmed %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
summarise("confirmed" = sum(value, na.rm = T))
View(data_confirmed)
data_confirmed    <- read_csv(jhonH_confirmed_n)
data_deceased     <- read_csv(jhonH_deceased_n)
data_recovered    <- read_csv(jhonH_recovered_n)
View(data_confirmed)
data_confirmed    <- read_csv(jhonH_confirmed_n)
View(data_confirmed)
data_confirmed    <- read.csv(jhonH_confirmed_n)
View(data_confirmed)
data_confirmed    <- read_csv(jhonH_confirmed )
View(data_confirmed)
url_Confirmed_JH = "https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv&filename=time_series_covid19_confirmed_global.csv"
url_deaths_JH = "https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv&filename=time_series_covid19_deaths_global.csv"
url_recovered_JH= "https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_recovered_global.csv&filename=time_series_covid19_recovered_global.csv"
data_file <- read.csv(url_Confirmed_JH)
write_csv(data_file,jhonH_confirmed_n,row.names = FALSE)
data_file <- read.csv(url_deaths_JH)
write_csv(data_file,jhonH_deceased_n,row.names = FALSE)
data_file <- read.csv(url_recovered_JH)
write_csv(data_file,jhonH_recovered_n,row.names = FALSE)
data_file <- read.csv(url_Confirmed_JH)
write_csv(data_file,jhonH_confirmed_n )
data_file <- read.csv(url_Confirmed_JH)
View(data_file)
data_file <- read_csv(url_Confirmed_JH)
View(data_file)
source('app.R')
data_file <- read_csv(url_Confirmed_JH)
write.csv(data_file,jhonH_confirmed_n,row.names = FALSE )
PATH_DATA                 <-"./APPCOVID/data"
jhonH_confirmed_n     <- sprintf("%s/time_series_covid19_confirmed_global_%s.csv",PATH_DATA,nowdate)
jhonH_deceased_n      <- sprintf("%s/time_series_covid19_deaths_global_%s.csv",PATH_DATA,nowdate)
jhonH_recovered_n     <- sprintf("%s/time_series_covid19_recovered_global_%s.csv",PATH_DATA,nowdate)
data_file <- read_csv(url_Confirmed_JH)
write.csv(data_file,jhonH_confirmed_n,row.names = FALSE )
source('app.R')
PATH_DATA                 <-"./appcovid/data"
jhonH_confirmed_n     <- sprintf("%s/time_series_covid19_confirmed_global_%s.csv",PATH_DATA,nowdate)
jhonH_deceased_n      <- sprintf("%s/time_series_covid19_deaths_global_%s.csv",PATH_DATA,nowdate)
jhonH_recovered_n     <- sprintf("%s/time_series_covid19_recovered_global_%s.csv",PATH_DATA,nowdate)
data_file <- read_csv(url_Confirmed_JH)
write.csv(data_file,jhonH_confirmed_n,row.names = FALSE )
data_file <- read_csv(url_deaths_JH)
write.csv(data_file,jhonH_deceased_n,row.names = FALSE)
data_file <- read_csv(url_recovered_JH)
write.csv(data_file,jhonH_recovered_n,row.names = FALSE)
data_confirmed    <- read_csv(jhonH_confirmed )
data_deceased     <- read_csv(jhonH_deceased_n)
data_recovered    <- read_csv(jhonH_recovered_n)
data_confirmed    <- read_csv(jhonH_confirmed_n)
data_deceased     <- read_csv(jhonH_deceased_n)
data_recovered    <- read_csv(jhonH_recovered_n)
View(data_confirmed)
data_confirmed_sub <- data_confirmed %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
summarise("confirmed" = sum(value, na.rm = T))
View(data_confirmed_sub)
source('app.R')
